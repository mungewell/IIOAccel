//-----------------------------------------------------------
//
//  File MainClass.cpp generated by RTembedded
//  Created at: Tue Jun 16 10:26:57 2015 
//  *** Note - this file will be overwritten if the project is regenerated ***
//
//-----------------------------------------------------------

#include "MainClass.h"
#include <qthread.h>
#include <unistd.h>

MainClass::MainClass(QObject *parent) : QObject(parent)
{
}

void MainClass::run()
{

    m_accel = new RTeIIOAccel();
    m_accel->setModuleName("accel");
    m_accel->setSampleRate("2");
    setup();
    connect(m_accel, SIGNAL(newAccelSample(RTeModule *,RTeSensorAccelData *)), this, SLOT(newAccelSample_put(RTeModule *, RTeSensorAccelData *)), Qt::DirectConnection);
    m_accel->resumeThread();
    m_running = true;
    while(m_running) {;
        loop();
        usleep(10000);
    }
    m_accel->exitThread();
    usleep(10000);
    emit finished();
}

void MainClass::quit()
{
    m_running = false;
}

void MainClass::aboutToQuit()
{
}

void MainClass::newAccelSample_put(RTeModule *module, RTeSensorAccelData *userParameter){
    QMutexLocker lock(&m_newAccelSampleSlotQueueMutex);
    newAccelSampleSlotClass data;
    data.m_module = module;
    data.m_parameter = *userParameter;
    m_newAccelSampleSlotQueue.append(data);
}

bool MainClass::newAccelSample_get(RTeModule* &module, RTeSensorAccelData& userParameter){
    QMutexLocker lock(&m_newAccelSampleSlotQueueMutex);
    if (m_newAccelSampleSlotQueue.empty()) return false;
    newAccelSampleSlotClass data = m_newAccelSampleSlotQueue.dequeue();
    module = data.m_module;
    userParameter = data.m_parameter;
    return true;
}

bool MainClass::newAccelSample_getLastOnly(RTeModule* &module, RTeSensorAccelData& userParameter){
    QMutexLocker lock(&m_newAccelSampleSlotQueueMutex);
    if (m_newAccelSampleSlotQueue.empty()) return false;
    newAccelSampleSlotClass data = m_newAccelSampleSlotQueue.takeLast();
    m_newAccelSampleSlotQueue.clear();
    module = data.m_module;
    userParameter = data.m_parameter;
    return true;
}
